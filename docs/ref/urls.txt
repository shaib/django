=============================================
``django.urls`` functions for use in URLconfs
=============================================

.. module:: django.urls.conf
    :synopsis: Functions for use in URLconfs.

.. currentmodule:: django.urls

``path()``
==========

.. function:: path(route, view, kwargs=None, name=None)

.. versionadded:: 2.0

Returns an element for inclusion in ``urlpatterns``. For example::

    from django.urls import include, path

    urlpatterns = [
        path('index/', index_view, name='main-view'),
        path('personal/<username>/', views.personal_page),
        path('articles/<slug:title>/', views.article),
        path('articles/<slug:title>/<int:section>/', views.section),
        path('weblog/', include('blog.urls')),
        ...
    ]

The ``route`` parameter should be a string or
:func:`~django.utils.translation.gettext_lazy()` (see
:ref:`translating-urlpatterns`) that contains a URL path pattern. A pattern is
a prefix of the path to be matched, but it may also pick parts of the path to
be captured and passed as parameters to the view when a match is made. Such
parts, or fields, are specified by a name in angled brackets (like
``<username>`` above), with an optional converter specification (like
``<int:section>``). Where converters are specified, they also imply a format
for the field -- e.g. ``<int:section>`` will only match a string of decimal
digits. See :ref:`How Django processes a
request<how-django-processes-a-request>` for further discussion.

The ``view`` parameter is a view function or the result of
:meth:`~django.views.generic.base.View.as_view` for class-based views. It can
also be an :func:`django.urls.include`.

The ``kwargs`` parameter allows you to pass additional arguments to the view
function or method. See :ref:`views-extra-options` for an example.

See :ref:`Naming URL patterns <naming-url-patterns>` for why the ``name``
parameter is useful.

``re_path()``
=============

.. function:: re_path(route, view, kwargs=None, name=None)

.. versionadded:: 2.0

Returns an element for inclusion in ``urlpatterns``. For example::

    from django.urls import include, re_path

    urlpatterns = [
        re_path(r'^index/$', index_view, name='main-view'),
        re_path(r'^personal/(?P<username>\w+)/$', views.personal_page),
        re_path(r'^weblog/', include('blog.urls')),
        ...
    ]

The ``route`` parameter should be a string or
:func:`~django.utils.translation.gettext_lazy()` (see
:ref:`translating-urlpatterns`) that contains a regular expression compatible
with Python's :py:mod:`re` module. Strings typically use raw string syntax
(``r''``) so that they can contain sequences like ``\d`` without the need to
escape the backslash with another backslash. When a match is made, captured
groups from the regular expression are passed to the view -- as named arguments
if the groups are named, and as positional arguments otherwise; the values are
passed as strings, with no type conversion.

The ``view``, ``kwargs`` and ``name`` parameters are the same as for :func:`~django.urls.path()`.

.. versionchanged:: 2.0

   :func:`django.conf.urls.url()` has been replaced by
   :func:`django.urls.re_path()`. The old name is kept for backwards
   compatibility, as a shim for the new function.

``register_converter()``
========================

.. function:: register_converter(converter, typename)

.. versionadded:: 2.0

This function registers a converter for use in path patterns passed to
:func:`~django.urls.path()`.

``converter`` is a converter class -- a class with a ``regex`` attribute, and
``to_python()`` and ``to_url()`` methods. See
:ref:`Defining URL type conversions<defining-url-type-conversions>`.

``typename`` is the converter name to use in path patterns.

Users are expected to call register_converter in their URLconf module, to make
sure converters are registered before the URLconf is loaded. For example::

    from django.urls import path, register_converter

    from my_project.converters import CountryConverter
    from . import views

    register_converter(CountryConverter, 'country')

    urlpatterns = [
        path('events/<country:where>/', views.region_events)
        ...
    ]

``include()``
=============

.. function:: include(module, namespace=None)
              include(pattern_list)
              include((pattern_list, app_namespace), namespace=None)

    A function that takes a full Python import path to another URLconf module
    that should be "included" in this place. Optionally, the :term:`application
    namespace` and :term:`instance namespace` where the entries will be included
    into can also be specified.

    Usually, the application namespace should be specified by the included
    module. If an application namespace is set, the ``namespace`` argument
    can be used to set a different instance namespace.

    ``include()`` also accepts as an argument either an iterable that returns
    URL patterns or a 2-tuple containing such iterable plus the names of the
    application namespaces.

    :arg module: URLconf module (or module name)
    :arg namespace: Instance namespace for the URL entries being included
    :type namespace: string
    :arg pattern_list: Iterable of :func:`django.urls.path`, :func:`django.urls.re_path`, and/or :func:`django.conf.urls.url` instances.
    :arg app_namespace: Application namespace for the URL entries being included
    :type app_namespace: string
    :arg instance_namespace: Instance namespace for the URL entries being included
    :type instance_namespace: string

See :ref:`including-other-urlconfs` and :ref:`namespaces-and-include`.

.. versionchanged:: 2.0

    In older versions, this function is located in ``django.conf.urls``. The
    old location still works for backwards compatibility.

==================================================
``django.conf.urls`` functions for use in URLconfs
==================================================

.. module:: django.conf.urls

``static()``
============

.. function:: static.static(prefix, view=django.views.static.serve, **kwargs)

Helper function to return a URL pattern for serving files in debug mode::

    from django.conf import settings
    from django.conf.urls.static import static

    urlpatterns = [
        # ... the rest of your URLconf goes here ...
    ] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)

``url()``
=========

.. function:: url(regex, view, kwargs=None, name=None)

.. versionchanged:: 2.0

This function has been replaced by :func:`django.urls.re_path()`, which has the
same interface and semantics. It has not been formally deprecated, for major
backwards-compatibility concerns, but will be deprecated at some future point.

``handler400``
==============

.. data:: handler400

A callable, or a string representing the full Python import path to the view
that should be called if the HTTP client has sent a request that caused an error
condition and a response with a status code of 400.

By default, this is :func:`django.views.defaults.bad_request`. If you
implement a custom view, be sure it returns an
:class:`~django.http.HttpResponseBadRequest`.

``handler403``
==============

.. data:: handler403

A callable, or a string representing the full Python import path to the view
that should be called if the user doesn't have the permissions required to
access a resource.

By default, this is :func:`django.views.defaults.permission_denied`. If you
implement a custom view, be sure it returns an
:class:`~django.http.HttpResponseForbidden`.

``handler404``
==============

.. data:: handler404

A callable, or a string representing the full Python import path to the view
that should be called if none of the URL patterns match.

By default, this is :func:`django.views.defaults.page_not_found`. If you
implement a custom view, be sure it returns an
:class:`~django.http.HttpResponseNotFound`.

``handler500``
==============

.. data:: handler500

A callable, or a string representing the full Python import path to the view
that should be called in case of server errors. Server errors happen when you
have runtime errors in view code.

By default, this is :func:`django.views.defaults.server_error`. If you
implement a custom view, be sure it returns an
:class:`~django.http.HttpResponseServerError`.
